{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the documentation for <code>Kafkapy</code>.","text":""},{"location":"#quick-start","title":"Quick Start","text":"<p><code>Kafkapy</code> can be installed with pip:</p> <pre><code>pip install kafkapy\n</code></pre>"},{"location":"topics/","title":"Topic Commands","text":""},{"location":"topics/#kafkapy.topics","title":"kafkapy.topics","text":""},{"location":"topics/#kafkapy.topics.list","title":"list","text":"<pre><code>list(\n    bootstrap_servers=OptionDefaults.LOCAL_KAFKA,\n    properties=pathlib.Path(\"~/.kafkapy/properties.yaml\"),\n    topic=None,\n    timeout=-1,\n)\n</code></pre> <p>Fetches topic meta data.  This includes information about the brokers, cluster_id and topic partition data, including leader, replic and in sync replica data.</p> PARAMETER  DESCRIPTION <code>bootstrap_servers</code> <p>The kafka broker addresses for bootstrapping client connections.</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>LOCAL_KAFKA</code> </p> <code>properties</code> <p>The properties.yaml file path, defaults to ~/.kafkapy/properties.yaml.</p> <p> TYPE: <code>KafkaProtocolProperties</code> DEFAULT: <code>Path('~/.kafkapy/properties.yaml')</code> </p> <code>topic</code> <p>A specific topic to fetch, if omitted all topic data is returned.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p>The timeout for read/connect timeouts, if omitted will try indefinitely.</p> <p> TYPE: <code>int</code> DEFAULT: <code>-1</code> </p> Source code in <code>kafkapy/topics.py</code> <pre><code>@topics.command(help=generate_help(CommandDescriptions.TOPIC_LIST))\ndef list(\n    bootstrap_servers: Annotated[\n        typing.List[str], BOOTSTRAP_SERVERS_OPTION\n    ] = OptionDefaults.LOCAL_KAFKA,\n    properties: Annotated[\n        KafkaProtocolProperties, PROPERTIES_FILE_OPTION\n    ] = pathlib.Path(\"~/.kafkapy/properties.yaml\"),\n    topic: Annotated[str, topic_name_option] = None,\n    timeout: Annotated[int, timeout_seconds_option] = -1,\n) -&gt; None:\n    \"\"\"Fetches topic meta data.  This includes information about the brokers,\n    cluster_id and topic partition data, including leader, replic and in sync replica\n    data.\n\n    :param bootstrap_servers: The kafka broker addresses for bootstrapping client connections.\n    :param properties: The properties.yaml file path, defaults to ~/.kafkapy/properties.yaml.\n    :param topic: A specific topic to fetch, if omitted all topic data is returned.\n    :param timeout: The timeout for read/connect timeouts, if omitted will try indefinitely.\"\"\"\n    with get_client(\n        properties=properties,\n        bootstrap_servers=bootstrap_servers,\n    ) as client:\n        topic_metadata = client.list_topics(\n            topic=topic,\n            timeout=timeout,\n        )\n        write_json_out(topic_metadata)\n</code></pre>"},{"location":"topics/#kafkapy.topics.create","title":"create","text":"<pre><code>create(bootstrap_servers=OptionDefaults.LOCAL_KAFKA, properties=pathlib.Path('~/.kafkapy/properties.yaml'))\n</code></pre> Source code in <code>kafkapy/topics.py</code> <pre><code>@topics.command(help=generate_help(CommandDescriptions.TOPIC_CREATE))\ndef create(\n    bootstrap_servers: Annotated[\n        typing.List[str], BOOTSTRAP_SERVERS_OPTION\n    ] = OptionDefaults.LOCAL_KAFKA,\n    properties: Annotated[\n        KafkaProtocolProperties, PROPERTIES_FILE_OPTION\n    ] = pathlib.Path(\"~/.kafkapy/properties.yaml\"),\n) -&gt; None:\n    ...\n</code></pre>"},{"location":"topics/#kafkapy.topics.describe","title":"describe","text":"<pre><code>describe(bootstrap_servers=OptionDefaults.LOCAL_KAFKA, properties=pathlib.Path('~/.kafkapy/properties.yaml'))\n</code></pre> Source code in <code>kafkapy/topics.py</code> <pre><code>@topics.command(help=generate_help(CommandDescriptions.TOPIC_DESCRIBE))\ndef describe(\n    bootstrap_servers: Annotated[\n        typing.List[str], BOOTSTRAP_SERVERS_OPTION\n    ] = OptionDefaults.LOCAL_KAFKA,\n    properties: Annotated[\n        KafkaProtocolProperties, PROPERTIES_FILE_OPTION\n    ] = pathlib.Path(\"~/.kafkapy/properties.yaml\"),\n) -&gt; None:\n    ...\n</code></pre>"},{"location":"topics/#kafkapy.topics.delete","title":"delete","text":"<pre><code>delete(bootstrap_servers=OptionDefaults.LOCAL_KAFKA, properties=pathlib.Path('~/.kafkapy/properties.yaml'))\n</code></pre> Source code in <code>kafkapy/topics.py</code> <pre><code>@topics.command(help=generate_help(CommandDescriptions.TOPIC_DELETE))\ndef delete(\n    bootstrap_servers: Annotated[\n        typing.List[str], BOOTSTRAP_SERVERS_OPTION\n    ] = OptionDefaults.LOCAL_KAFKA,\n    properties: Annotated[\n        KafkaProtocolProperties, PROPERTIES_FILE_OPTION\n    ] = pathlib.Path(\"~/.kafkapy/properties.yaml\"),\n) -&gt; None:\n    ...\n</code></pre>"},{"location":"topics/#kafkapy.topics.destroy","title":"destroy","text":"<pre><code>destroy(bootstrap_servers=OptionDefaults.LOCAL_KAFKA, properties=pathlib.Path('~/.kafkapy/properties.yaml'))\n</code></pre> Source code in <code>kafkapy/topics.py</code> <pre><code>@topics.command(help=generate_help(CommandDescriptions.TOPIC_DESTROY))\ndef destroy(\n    bootstrap_servers: Annotated[\n        typing.List[str], BOOTSTRAP_SERVERS_OPTION\n    ] = OptionDefaults.LOCAL_KAFKA,\n    properties: Annotated[\n        KafkaProtocolProperties, PROPERTIES_FILE_OPTION\n    ] = pathlib.Path(\"~/.kafkapy/properties.yaml\"),\n) -&gt; None:\n    ...\n</code></pre>"},{"location":"user_guide/","title":"User Guide","text":""},{"location":"user_guide/#advanced-user-guide","title":"Advanced User Guide","text":""}]}