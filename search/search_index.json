{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the documentation for <code>Kafkapy</code>.","text":""},{"location":"#quick-start","title":"Quick Start","text":"<p><code>Kafkapy</code> can be installed with pip:</p> <pre><code>pip install kafkapy\n</code></pre>"},{"location":"topics/","title":"Topic Commands","text":""},{"location":"topics/#kafkapy.topics","title":"kafkapy.topics","text":""},{"location":"topics/#kafkapy.topics.list","title":"list","text":"<pre><code>list(\n    topic=None,\n    bootstrap_servers=OptionDefaults.LOCAL_KAFKA,\n    properties=pathlib.Path(\"~/.kafkapy/properties.yaml\"),\n    timeout=-1,\n)\n</code></pre> <p>Fetches topic meta data.  This includes information about the brokers, cluster_id and topic partition data, including leader, replic and in sync replica data.</p> <p>WARNING: Listing a non existent topic can cause it to be created on the cluster if auto.create.topics.enable is set to true on the broker.</p> PARAMETER  DESCRIPTION <code>bootstrap_servers</code> <p>The kafka broker addresses for bootstrapping client connections.</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>LOCAL_KAFKA</code> </p> <code>properties</code> <p>The properties.yaml file path, defaults to ~/.kafkapy/properties.yaml.</p> <p> TYPE: <code>KafkaProtocolProperties</code> DEFAULT: <code>Path('~/.kafkapy/properties.yaml')</code> </p> <code>topic</code> <p>A specific topic to fetch, if omitted all topic data is returned.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p>The timeout for read/connect timeouts, if omitted will try indefinitely.</p> <p> TYPE: <code>int</code> DEFAULT: <code>-1</code> </p> Source code in <code>kafkapy/topics.py</code> <pre><code>@topics_application.command(help=generate_help(CommandDescriptions.TOPIC_LIST))\ndef list(\n    topic: Annotated[str, TOPIC_NAME_OPTION] = None,\n    bootstrap_servers: Annotated[\n        typing.List[str], BOOTSTRAP_SERVERS_OPTION\n    ] = OptionDefaults.LOCAL_KAFKA,\n    properties: Annotated[\n        KafkaProtocolProperties, PROPERTIES_FILE_OPTION\n    ] = pathlib.Path(\"~/.kafkapy/properties.yaml\"),\n    timeout: Annotated[int, TIMEOUT_INDEF_SECONDS_OPTION] = -1,\n) -&gt; None:\n    \"\"\"Fetches topic meta data.  This includes information about the brokers,\n    cluster_id and topic partition data, including leader, replic and in sync replica\n    data.\n\n    WARNING: Listing a non existent topic can cause it to be created on the cluster if\n    auto.create.topics.enable is set to true on the broker.\n\n    :param bootstrap_servers: The kafka broker addresses for bootstrapping client connections.\n    :param properties: The properties.yaml file path, defaults to ~/.kafkapy/properties.yaml.\n    :param topic: A specific topic to fetch, if omitted all topic data is returned.\n    :param timeout: The timeout for read/connect timeouts, if omitted will try indefinitely.\"\"\"\n    with get_client(\n        properties=properties,\n        bootstrap_servers=bootstrap_servers,\n    ) as client:\n        topic_metadata = client.list_topics(\n            topic=topic,\n            timeout=timeout,\n        )\n        write_json_out(topic_metadata)\n</code></pre>"},{"location":"topics/#kafkapy.topics.create","title":"create","text":"<pre><code>create(\n    topic_config,\n    topic,\n    operation_timeout=0,\n    request_timeout=30.0,\n    partitions=-1,\n    replication_factor=-1,\n    replica_assignment=None,\n    bootstrap_servers=OptionDefaults.LOCAL_KAFKA,\n    properties=pathlib.Path(\"~/.kafkapy/properties.yaml\"),\n)\n</code></pre> <p>Create a new topic.</p> PARAMETER  DESCRIPTION <code>topics</code> <p>(Required) The topic data, this should typically be provided as a dictionary where the topic name is stored under a 'name' key and additional topic is provided.</p> <p> </p> <code>operation_timeout</code> <p>...</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>request_timeout</code> <p>...</p> <p> TYPE: <code>float</code> DEFAULT: <code>30.0</code> </p> <code>topic_config</code> <p>...</p> <p> TYPE: <code>str</code> </p> <code>partitions</code> <p>...</p> <p> TYPE: <code>int</code> DEFAULT: <code>-1</code> </p> <code>replication_factor</code> <p>...</p> <p> TYPE: <code>int</code> DEFAULT: <code>-1</code> </p> <code>replica_assignment</code> <p>...</p> <p> TYPE: <code>List[int]</code> DEFAULT: <code>None</code> </p> <code>bootstrap_servers</code> <p>...</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>LOCAL_KAFKA</code> </p> <code>properties</code> <p>...</p> <p> TYPE: <code>KafkaProtocolProperties</code> DEFAULT: <code>Path('~/.kafkapy/properties.yaml')</code> </p> Source code in <code>kafkapy/topics.py</code> <pre><code>@topics_application.command(help=generate_help(CommandDescriptions.TOPIC_CREATE))\ndef create(\n    topic_config: Annotated[str, TOPIC_CONFIG_OPTION],\n    topic: Annotated[str, TOPIC_NAME_OPTION],\n    operation_timeout: Annotated[float, OPERATION_TIMEOUT] = 0,\n    request_timeout: Annotated[float, REQUEST_TIMEOUT] = 30.00,\n    partitions: Annotated[int, TOPIC_PARTITION_OPTION] = -1,\n    replication_factor: Annotated[int, TOPIC_REPLICATION_FACTOR_OPTION] = -1,\n    replica_assignment: Annotated[\n        # Todo: Typer, or click does not support a 2D array/matrix.\n        typing.List[int],\n        TOPIC_REPLICA_ASSIGNMENT_OPTION,\n    ] = None,\n    bootstrap_servers: Annotated[\n        typing.List[str], BOOTSTRAP_SERVERS_OPTION\n    ] = OptionDefaults.LOCAL_KAFKA,\n    properties: Annotated[\n        KafkaProtocolProperties, PROPERTIES_FILE_OPTION\n    ] = pathlib.Path(\"~/.kafkapy/properties.yaml\"),\n) -&gt; None:\n    \"\"\"Create a new topic.\n\n    :param topics: (Required) The topic data, this should typically be provided as a\n    dictionary where the topic name is stored under a 'name' key and additional topic\n    is provided.\n    :param operation_timeout: ...\n    :param request_timeout: ...\n    :param topic_config: ...\n    :param partitions: ...\n    :param replication_factor: ...\n    :param replica_assignment: ...\n    :param bootstrap_servers: ...\n    :param properties: ...\n    \"\"\"\n    ...\n</code></pre>"},{"location":"topics/#kafkapy.topics.describe","title":"describe","text":"<pre><code>describe(\n    topics,\n    include_authorized_operations=False,\n    request_timeout=30.0,\n    bootstrap_servers=OptionDefaults.LOCAL_KAFKA,\n    properties=pathlib.Path(\"~/.kafkapy/properties.yaml\"),\n)\n</code></pre> <p>Describe a suite of topic(s).</p> PARAMETER  DESCRIPTION <code>topics</code> <p>(Required) ...</p> <p> TYPE: <code>List[str]</code> </p> <code>include_authorized_operations</code> <p>...</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>request_timeout</code> <p>...</p> <p> TYPE: <code>float</code> DEFAULT: <code>30.0</code> </p> <code>bootstrap_servers</code> <p>...</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>LOCAL_KAFKA</code> </p> <code>properties</code> <p>...</p> <p> TYPE: <code>KafkaProtocolProperties</code> DEFAULT: <code>Path('~/.kafkapy/properties.yaml')</code> </p> Source code in <code>kafkapy/topics.py</code> <pre><code>@topics_application.command(help=generate_help(CommandDescriptions.TOPIC_DESCRIBE))\ndef describe(\n    topics: Annotated[typing.List[str], TOPIC_NAME_OPTION],\n    include_authorized_operations: Annotated[\n        bool, TOPIC_AUTHORIZED_OPERATIONS_OPTION\n    ] = False,\n    request_timeout: Annotated[float, REQUEST_TIMEOUT] = 30.00,\n    bootstrap_servers: Annotated[\n        typing.List[str], BOOTSTRAP_SERVERS_OPTION\n    ] = OptionDefaults.LOCAL_KAFKA,\n    properties: Annotated[\n        KafkaProtocolProperties, PROPERTIES_FILE_OPTION\n    ] = pathlib.Path(\"~/.kafkapy/properties.yaml\"),\n) -&gt; None:\n    \"\"\"Describe a suite of topic(s).\n\n    :param topics: (Required) ...\n    :param include_authorized_operations: ...\n    :param request_timeout: ...\n    :param bootstrap_servers: ...\n    :param properties: ...\n    \"\"\"\n    ...\n</code></pre>"},{"location":"topics/#kafkapy.topics.delete","title":"delete","text":"<pre><code>delete(\n    topics,\n    operation_timeout=30.0,\n    request_timeout=30.0,\n    bootstrap_servers=OptionDefaults.LOCAL_KAFKA,\n    properties=pathlib.Path(\"~/.kafkapy/properties.yaml\"),\n)\n</code></pre> <p>Delete one or more topics.</p> PARAMETER  DESCRIPTION <code>topics</code> <p>A list of topics to mark for deletion.</p> <p> TYPE: <code>List[str]</code> </p> <code>operation_timeout</code> <p>The operation timeout in seconds, controlling how long the request will block on the broker waiting for the topic deletion to propagate in the cluster.</p> <p> TYPE: <code>float</code> DEFAULT: <code>30.0</code> </p> <code>request_timeout</code> <p>The overall request timeout in seconds, including broker lookup, request transmission, operation time on broker and response.  Default 30 seconds.</p> <p> TYPE: <code>float</code> DEFAULT: <code>30.0</code> </p> <code>bootstrap_servers</code> <p>The kafka broker addresses for bootstrapping client connections.</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>LOCAL_KAFKA</code> </p> <code>properties</code> <p>The properties.yaml file path, defaults to ~/.kafkapy/properties.yaml.</p> <p> TYPE: <code>KafkaProtocolProperties</code> DEFAULT: <code>Path('~/.kafkapy/properties.yaml')</code> </p> Source code in <code>kafkapy/topics.py</code> <pre><code>@topics_application.command(help=generate_help(CommandDescriptions.TOPIC_DELETE))\ndef delete(\n    topics: Annotated[typing.List[str], TOPICS_NAME_OPTION],\n    operation_timeout: Annotated[float, OPERATION_TIMEOUT] = 30.00,\n    request_timeout: Annotated[float, REQUEST_TIMEOUT] = 30.00,\n    bootstrap_servers: Annotated[\n        typing.List[str], BOOTSTRAP_SERVERS_OPTION\n    ] = OptionDefaults.LOCAL_KAFKA,\n    properties: Annotated[\n        KafkaProtocolProperties, PROPERTIES_FILE_OPTION\n    ] = pathlib.Path(\"~/.kafkapy/properties.yaml\"),\n) -&gt; None:\n    \"\"\"Delete one or more topics.\n\n    :param topics: A list of topics to mark for deletion.\n    :param operation_timeout: The operation timeout in seconds, controlling how long the request will\n    block on the broker waiting for the topic deletion to propagate in the cluster.\n    :param request_timeout: The overall request timeout in seconds, including broker lookup,\n    request transmission, operation time on broker and response.  Default 30 seconds.\n    :param bootstrap_servers: The kafka broker addresses for bootstrapping client connections.\n    :param properties: The properties.yaml file path, defaults to ~/.kafkapy/properties.yaml.\n    \"\"\"\n    with get_client(\n        properties=properties, bootstrap_servers=bootstrap_servers\n    ) as client:\n        response = client.delete_topics(\n            topics=topics,\n            operation_timeout=operation_timeout,\n            request_timeout=request_timeout,\n        )\n        write_json_out(response)\n        if response.failures:\n            die(1)\n</code></pre>"},{"location":"topics/#kafkapy.topics.destroy","title":"destroy","text":"<pre><code>destroy(bootstrap_servers=OptionDefaults.LOCAL_KAFKA, properties=pathlib.Path('~/.kafkapy/properties.yaml'))\n</code></pre> <p>Delete all topics.</p> PARAMETER  DESCRIPTION <code>bootstrap_servers</code> <p>...</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>LOCAL_KAFKA</code> </p> <code>properties</code> <p>...</p> <p> TYPE: <code>KafkaProtocolProperties</code> DEFAULT: <code>Path('~/.kafkapy/properties.yaml')</code> </p> Source code in <code>kafkapy/topics.py</code> <pre><code>@topics_application.command(help=generate_help(CommandDescriptions.TOPIC_DESTROY))\ndef destroy(\n    bootstrap_servers: Annotated[\n        typing.List[str], BOOTSTRAP_SERVERS_OPTION\n    ] = OptionDefaults.LOCAL_KAFKA,\n    properties: Annotated[\n        KafkaProtocolProperties, PROPERTIES_FILE_OPTION\n    ] = pathlib.Path(\"~/.kafkapy/properties.yaml\"),\n) -&gt; None:\n    \"\"\"Delete all topics.\n\n    :param bootstrap_servers: ...\n    :param properties: ...\"\"\"\n</code></pre>"},{"location":"user_guide/","title":"User Guide","text":""},{"location":"user_guide/#advanced-user-guide","title":"Advanced User Guide","text":""}]}